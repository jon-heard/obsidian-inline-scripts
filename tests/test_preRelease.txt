
////////////////////////////
////////////////////////////
//// TEST - PRE-RELEASE ////
////////////////////////////
////////////////////////////


////////////////////
// COMMON ACTIONS //
////////////////////

CHECK SHORTCUT X
1. Type ";;X::", where X is the shortcut to check
2. Confirm that the typed text is replaced with something.
3. Confirm that there are no new console messages

CHECK INVALID SHORTCUT X
1. Type ";;X::", where X is the shortcut to check
2. Confirm that a popup shows the shortcut as unidentified
3. Confirm that a console log show the shortcut as unidentified
4. Confirm that the text that you entered for the shortcut is not removed.

CHECK REF X FOR SHORTCUT Y
1. Enter the shortcut "ref X"
2. Confirm that the shortcut Y entry is in the list
3. Confirm that the shortcut y entry is what it should be

CHECK REF X FOR INVALID SHORTCUT Y
1. Enter the shortcut "ref x"
2. Confirm that the shortcut y entry is NOT in the list

CHECK HELP X
1. Enter the shortcut "help X"
2. Confirm that it expanded into a valid text
3. Confirm that no new console entries were added
2. Enter the shortcut "ref X"
2. Confirm that it expanded into a valid ref text
3. Confirm that no new console entries were added

CHECK INVALID HELP X
1. Check invalid shortcut "about X" (common action)
2. Check invalid shortcut "ref X" (common action)

ADD SHORTCUT
1. Open plugin settings (if not already opened)
2. Go to the "Shortcuts" setting and click the "Add shortcut" button
3. Find the newly created shortcut entry in the list beneath the settings
4. Note that the text just after this step shows the "test", "expansion" and (maybe) "about" strings
5. Copy the test & expansion into the new shortcut entry.  If the about is provided, copy that too.
6. Close plugin settings

MODIFY SHORTCUT X
1. Open plugin settings (if not already opened)
3. Find the shortcut entry with the Test text of X
4. Note that the text just after this step shows the "test", "expansion" and/or "about" strings
5. Copy the given strings into the shortcut entry.
6. Close plugin settings

RESET SETTINGS
1. Open plugin settings
2. Hit the "Reset to defaults" button (at the bottom of the settings)
3. Close plugin settings

ADD NOTE X
1. Create note X if it doesn't exist (including the path folders)
2. Note the block of indented text just after this step
3. Copy the block of indented text into the new note X (replacing anything there up to now)
4. Select-all in the note (ctrl-a) and un-indent once (shift-tab)
5. Return to the note "testResults"

REGISTER SHORTCUT-FILE X
1. Open plugin settings
2. Click on "Add shortcut-file" button beside "Shortcut-files" setting
3. Fill the new shortcut-file's entry's textbox with X
4. Close plugin settings

//////////
// TEST //
//////////

PREP
1. Setup an empty vault
2. Install the plugin
3. Make note titled "testResults" in which to type everything for the test.
    - note - Feel free to clear this file at any point during the test.
4. Open console (ctrl-shift-i)
5. Make sure the plugin is disabled
6. Close Obsidian
7. Delete plugin "data.json" file if it exists

SETUP & SHUTDOWN
1. Open Obsidian
2. Enable plugin, disable, then renable it
3. Confirm that the console shows 3 logs from the plugin
4. Close and reopen Obsidian
5. Confirm that the console shows 1 log from the plugin

BASIC FUNCTIONALITY
1. Check shortcut "hi" (common action)
2. Check invalid shortcut "no" (common action)

OLD EDITOR, CM5 !! NON-MOBILE ONLY !!
1. Go to the Editor options
2. Turn ON "Use legacy editor"
3. Click the "Relaunch" button
4. Check shortcut "hi" (common action)
5. Go to the Editor options
6. Turn OFF "Use legacy editor"
7. Click the "Relaunch" button

BASIC SETTINGS - RESET TO DEFAULTS
1. Check shortcut "hi" (common action)
2. Open plugin settings
3. Register shortcut-file "testSFile" (common action)
4. Unset the toggle to the left of shorcut-file entry "testSFile"
5. Erase all shortcuts in the "Shortcuts" setting (use the trash button and enter to confirm)
6. Add shortcut (common action)
	- test:
		testShortcut
	- expansion:
		testShortcut
8. Change prefix and suffix settings to "<<" and ">>" respectively
9. Turn on "Developer mode" and "Allow external" settings
10. Close plugin settings
11. Check invalid shortcut "hi" (common action)
12. Open plugin settings
13. Confirm that all settings remain at what was just entered
14. Click "Reset to defaults" button (last setting).
15. Click "Cancel" button in the confirmation popup
16. Confirm that none of the settings have changed
17. Click "Reset to defaults" button (last setting).
18. Click "Ok" button in the confirmation popup
19. Confirm that all settings have reverted to defaults:
  1. Shortcut-files list is empty
  2. Shortcuts list has a bunch of sample shortcuts
  3. Prefix and Suffix are ";;" and "::" respectively
  4. "Developer mode" and "Allow external" are turned off
20. Close plugin settings
21. Check shortcut "hi" (common action)

BASIC SETTINGS
1. Open and close plugin settings
2. Check shortcut "hi" (common action)
3. Open plugin settings
4. Delete all shortcuts (can use "enter" key to accept confirmation popup)
5. Close plugin settings
6. Check invalid shortcut "hi" (common action)
7. Open plugin settings
8. Click "Add defaults" button in "Shortcuts" setting
9. Close plugin settings
10. Check shortcut "hi" (common action)
11. Type "<<hi>>" and confirm that nothing happens
12. Open plugin settings
13. Change prefix & suffix settings (near the bottom) to "<<" and ">>"
14. Close plugin settings
15. Use prefix & suffix of "<<" & ">>" to check shortcut "hi" (common action)
16. Type ";;hi::" and confirm that nothing happens
17. Open plugin settings
18. Change prefix & suffix to ";;" and "::"
19. Close plugin settings
20. Check shortcut "hi" (common action)
21. Type "<<hi>>" and confirm that nothing happens

BASIC SETTINGS - ERRORS
1. Open plugin settings
2. Delete the Prefix setting (under "Shortcut format")
3. Confirm that a red error box appears above the prefix setting, warning you about invalid prefix
4. Close and open plugin settings
5. Confirm that the prefix setting is back to what it was at the start
6. Delete the Suffix setting
7. Confirm that a red error box appears above the prefix setting, warning about invalid suffix
8. Close and open plugin settings
9. Confirm that the suffix setting is back to what it was at the start
10. Set the prefix setting to the suffix setting
11. Confirm that a red error box appears above the prefix setting, warning about suffix containing prefix
12. Close and open plugin settings
13. Confirm that the prefix setting is back to what it was at the start
14. Set the prefix setting to "{"
15. Confirm that a red error box appears above the prefix setting, warning about characters with auto-complete
16. Close and open plugin settings
17. Confirm that the prefix setting is back to what it was at the start

BASIC SHORTCUTS
1. Check invalid shortcut "test 1" (common action)
2. Check shortcut "hi" (common action)
3. Check ref "settings" for invalid shortcut "test 1" (common action)
4. Check ref "settings" for shortcut "hi" (common action)
5. add shortcut (common action)
	- Test:
		^test 1$
	- Expansion:
		return "Test 1 successful";
	- About:
		test 1 - First test shortcut

6. Check shortcut "test 1" (common action)
7. Check shortcut "hi" (common action)
8. Check ref "settings" for shortcut "hi" (common action)
9. Check help "settings for shortcut "test 1" (common action)
10. Open plugin settings
11. Modify shortcut ^test 1$ (common action):
	- Expansion:
		return [ "Test 1 ", "successful" ];
12. Close plugin settings
13. Check shortcut "test 1" (common action)
14. Confirm that expansion is "test 1 successful"
15. add shortcut (common action)
	all blank
16. Open plugin settings
17. confirm that the blank shortcut is removed automatically
18. Modify shortcut ^test 1$ (common action):
	- Expansion:
		return print("test 1 successful");
19. Check shortcut "test 1" (common action)
20. Confirm that popup and console entry both appear with "TEJS Shortcut: test 1 successful"
21. Confirm that expansion is "test 1 successful"
22. Open plugin settings
23. Delete the shortcut "^test 1$"
24. Close plugin settings
25. Check invalid shortcut "test 1" (common action)
26. Check shortcut "hi" (common action)
27. Check ref "settings" for invalid shortcut "test 1" (common action)
28. Check ref "settings" for shortcut "hi" (common action)

BASIC SHORTCUT ERRORS
1. Add shortcut (common action):
	- Test:
		[^test 2$
	- Expansion:
		return "Test 2 successful";
	- About
		test 2 - Second test shortcut

2. Confirm that popup tells about shortcut-file issues (when settings are closed)
3. Confirm that BAD-TEST-STRING-ERROR is added to the console (when settings are closed)
4. Check invalid shortcut "test 2" (common action)
5. Check ref "settings" for invalid shortcut "test 2" (common action)
6. Modify shortcut [^test 2$ (common action)
	- Test:
		^test 2$
	- Expansion:
		[return "Test 2 successful";

7. Confirm that no popup or console entry appears (when settings are closed)
8. Run shortcut "test 2"
9. Confirm that popup appears about shortcut expansion issues
10. Confirm that SHORTCUT-EXPANSION-ERROR is added to the console
11. Check ref "settings" for shortcut "test 2" (common action)
12. Modify shortcut ^test 2$ (common action)
	- Expansion:
		return { a: "Test 2 successful" };
19. Check shortcut "test 2" (common action)
20. Confirm that the test expands to "[object Object]"
21. Open plugin settings
22. Remove shortcut "^test 2$"
23. Close plugin settings
24. Confirm that no popup appears
25. Confirm that no new console entry appears

SHORTCUT ORDER
1. Add shortcut (common action):
	- Test:
		^test 3$
	- Expansion:
		return "First test 3 successful";
2. Add shortcut (common action):
	- Test:
		^test 3$
	- Expansion:
		return "Second test 3 successful";
3. Check shortcut "test 3" (common action)
4. Confirm that the expansion is "First test 3 successful"
5. Open plugin settings
6. Use the shortcut's arrow buttons to swap the order of the 2 "^test 3$" shortcuts
7. Close plugin settings
8. Check shortcut "test 3" (common action)
9. Confirm that the expansion is "Second test 3 successful"
10. Reset settings (common action)

SHORTCUTS - ADD DEFAULTS
1. Open plugin settings
2. Remove ALL shortcuts (can use "enter" key to accept confirmation popup)
3. Hit the "Add defaults" button
4. Confirm that a bunch of shortcuts are added
5. Remove all shortcuts except for "^date$"
6. Add two shortcuts with Tests of "first" and "second" (blank otherwise)
7. Hit the down arrow on the shortcut "^date$".
8. Confirm that the shortcuts are (in order): "first", "^date$", "second"
9. Hit the "Add defaults" button
10. Confirm that the shortcuts first and second are at the top
11. Confirm that the "^date$" shortcut comes after the first 3 shortcuts
12. Reset settings (common action)

SHORTCUTS - BACKSLASHES ARE TRANSLATED FROM SHORTCUT-TEXT TO EXPANSION-SCRIPTS
1. Add shortcut (common action)
	- Test:
		^echo (.+)$
	- Expansion:
		return $1;

2. Check shortcut "echo \h\n"a\tb" (common action)
3. Confirm that the expansion (when caret is on it) is "\h\n"a\tb"
4. Reset settings (common action)

SHORTCUTS - EXPANSION INFO
1. Add shortcut (common action)
	- Test:
		^echo (.+)$
	- Expansion:
		if ($1.startsWith("n"))
		{
			expansionInfo.cancel = true;
		}
		return $1;

2. Add shortcut (common action)
	- Test:
		^test info (.)$
	- Expansion:
		return "\n\tLine - " + expansionInfo.line + "\n" +
			"\tstart - " + expansionInfo.inputStart + "\n" +
			"\tend - " + expansionInfo.inputEnd + "\n" +
			"\tshortcutText - " + expansionInfo.shortcutText + "\n" +
			"\tprefix - " + expansionInfo.prefix + "\n" +
			"\tsuffix - " + expansionInfo.suffix + "\n\t";

3. Check shortcut "echo yes" (common action)
4. Confirm that the expansion is "yes"
5. Check shortcut "echo no" (common action)
6. Confirm that the expansion doesn't happen
7. Clear the note, then enter these lines of text into the note (without tabs):
	first line
	second line start test info a end
	third line

8. Wrap "test info a" (second line) in the shortcut prefix/suffix
9. Confirm tht the resulting note content is:
	first line
		second line start 
		Line - 	second line start ;;test info a:: end
		start - 18
		end - 33
		shortcutText - test info a
		prefix - ;;
		suffix - ::
		 end
	third line
10. Reset settings (common action)

SHORTCUTS - EXPAND FUNCTION
1. Add shortcut (common action)
	- Test:
		^test 4$
	- Expansion:
		return "Test 4 successful" + (expansionInfo.isUserTriggered ? ": user triggered" : ": not user triggered");

2. Add shortcut (common action)
	- Test:
		^test 5$
	- Expansion:
		return expand("test 4");

3. Check shortcut "test 4" (common action)
4. Confirm that the expansion is "Test 4 successful: user triggered"
5. Check shortcut "test 5" (common action)
6. Confirm that the expansion is "Test 4 successful: not user triggered"
7. Modify shortcut ^test 4$ (common action)
	- Expansion:
		return [ "Test 4 successful", (expansionInfo.isUserTriggered ? ": user triggered" : ": not user triggered") ];

8. Check shortcut "test 4" (common action)
12. Confirm that the expansion is "Test 4 successful: user triggered"
13. Check shortcut "test 5" (common action)
14. Confirm that the expansion is "Test 4 successful: not user triggered"
15. Modify shortcut ^test 5$ (common action)
	- Expansion:
		return expand("test 4")[0];

16. Check shortcut "test 5" (common action)
17. Confirm that the expansion is "Test 4 successful"
15. Modify shortcut ^test 5$ (common action)
	- Expansion:
		return expand("test 4")[0] + " (run by test 5)"[;

21. Check shortcut "test 5" (common action)
22. Confirm that a popup appears with "Shortcut expansion issues"
23. Confirm that SHORTCUT-EXPANSION-ERROR is added to the console
24. Reset settings (common action)

SHORTCUTS - RUNEXTERNAL FUNCTION !! NON-MOBILE ONLY !!
1. Add shortcut (common action)
	- Test:
		^test 6$
	- Expansion:
		return runExternal("dir");

2. Add shortcut (common action)
	- Test:
		^test 7$
	- Expansion:
		return runExternal("start /wait timeout 5 && dir", false, true);

3. Add shortcut (common action)
	- Test:
		^test 8$
	- Expansion:
		return runExternal("invalid");

4. If OS is NOT windows (Linux or Mac), change "^test 7" shortcut expansion to:
	- return runExternal("sleep 5 && dir");
5. Open plugin settings
6. Make sure that the "Allow external" setting is off (it's at the bottom)
7. Close plugin settings
8. Type ";;test 6::"
9. Confirm that "Unauthorized runExternal call" popup appears
10. Confirm that RUNEXTERNAL-ERROR is added to the console
11. Open plugin settings
10. Turn on "Allow external" setting (at the bottom)
11. Close plugin settings
12. Check shortcut "test 6" (common action)
13. Confirm that the expansion is a file directory
14. Check shortcut "test 7" (common action)
15. Confirm that obsidian is frozen for 5 seconds, then unfrozen with an expansion of a file directory
16. Type ";;test 8::"
17. Confirm that popup appears with "failed runExternal call"
18. Confirm that RUNEXTERNAL-ERROR is added to the console
19. Reset settings (common action)

BASIC SHORTCUT-FILES
1. Check invalid shortcut "test 9" (common action)
2. Check invalid shortcut "test 10" (common action)
3. Check invalid help "testfile_1" (common action)
4. Add note "testing/testfile_1.sfile" (common action)
	Test file

	__
	^test 9$

	__
	```js
	return "Test 9 successful";
	```
	__
	test 9 - Ninth test shortcut
	__
	```
	^test 10$
	```
	__

	return "Test 10 successful";

	__
	test 10 - Tenth test shortcut

5. Register shortcut-file "testing/testfile_1.sfile" (common action)
6. Confirm that entry turns red when typing has started
7. Confirm that entry turns dark grey when entry is finished
8. Check shortcut "test 9" (common action)
9. Check shortcut "test 10" (common action)
10. Check help "testfile_1" (common action)
11. Check ref "testfile_1" for shortcut "test 9" (common action)
12. Check ref "testfile_1" for shortcut "test 10" (common action)
13. Type ";;help::".
14. Confirm that the expansion includes "testfile_1"
15. Open plugin settings
16. Remove shortcut-file entry for "testing/testfile_1.sfile"
17. Close plugin settings
18. Check invalid shortcut "test 9" (common action)
19. Check invalid shortcut "test 10" (common action)
20. Check invalid help "testfile_1" (common action)
21. Type ";;help::".
22. Confirm that the expansion doesn't include "testfile_1"
23. Rename the note "testing/testfile_1.sfile" to "testing/testfile_1"
24. Go to the note "testResults"
25. Register shortcut-file "testing/testfile_1" (common action)
26. Register shortcut-file "" (blank) (common action)
27. Check help "testfile_1" (common action)
28. Open plugin settings
29. Confirm that there is only one shortcut-file entry: "testing/testfile_1"
30. Reset settings (common action)
31. Rename the note "testing/testfile_1" to "testing/testfile_1.sfile"

BASIC SHORTCUT-FILE ERRORS - MISSING-SHORTCUT-FILE-ERROR
1. Register shortcut-file "invalidFile" (common action)
2. Confirm that the new entry is red when finished
3. Confirm that a popup shows that "invalidFile.md" is missing
4. Confirm that MISSING-SHORTCUT-FILE-ERROR is added to the console
5. Check invalid help "invalidFile" (common action)
6. Open plugin settings
7. Confirm that the "invalidFile" shortcut-file entry is red
8. Close plugin settings
9. Confirm that no popup or console entry appears
10. Open plugin settings
11. Delete the "invalidFile" shortcut-file entry
12. Close plugin settings
13. Confirm that no popup or console entry appears

BASIC SHORTCUT-FILE ERRORS - MISNUMBERED-SECTION-COUNT-ERROR
1. Add note "testing/testfile_1.sfile" (common action)
	__
	^test 11$
	__
	return "Test 11 successful";
	__
	__
	^test 12$
	__
	return "Test 12 successful";

2. Register shortcut-file "testing/testfile_1.sfile" (common action)
3. Confirm that a popup about shortcut-file issues appears
4. Confirm that MISNUMBERED-SECTION-COUNT-ERROR is added to the console
5. Check help "testfile_1" (common action)
6. Check ref "testfile_1" for shortcut "^test 11$" (common action)
7. Check ref "testfile_1" for invalid shortcut "^test 12$" (common action)
8. Check shortcut "test 11" (common action)
9. Check invalid shortcut "test 12" (common action)
10. Go to note "testing/testfile_1.sfile"
11. Go to the note "testResults"
12. Confirm that no popup or console entry appears
13. Check shortcut "test 11" (common action)
14. Check invalid shortcut "test 12" (common action)
15. Go to note "testing/testfile_1.sfile"
16. Append a line to the end of the file with "__"
17. Go to the note "testResults"
18. Confirm that no popup or console entry appears
19. Check shortcut "test 11" (common action)
20. Check shortcut "test 12" (common action)
21. Check ref "testfile_1" for shortcut "^test 11$"  (common action)
22. Check ref "testfile_1" for shortcut "^test 12$" (common action)
23. Reset settings

DEVELOPER MODE
1. Add note "testing/testfile_1.sfile" (common action)
	__
	^test 13$
	__
	return "Test 13 successful";

2. Register shortcut-file "testing/testfile_1.sfile"
3. Confirm that a new popup shows shortcut-file issues
4. Confirm MISNUMBERED-SECTION-COUNT-ERROR is added to the console
5. Go to the note "testing/testfile_1.sfile"
6. Go to the note "testResults"
7. Confirm that no new popup or console entry appears
8. Open plugin settings
9. Turn on "Developer mode" (near bottom)
10. Close plugin settings
11. Confirm that no new popup or console entry appears
12. Go to the note "testing/testfile_1.sfile"
13. Go to the note "testResults"
14. Confirm that a new popup shows shortcut-file issues
15. Confirm that MISNUMBERED-SECTION-COUNT-ERROR is added to the console
16. Open plugin settings
17. Turn off "Developer mode"
18. Close plugin settings
19. Go to the note "testing/testfile_1.sfile"
20. Go to the note "testResults"
21. Confirm that no popup or console entry appears
22. Reset settings

SHORTCUT-FILE - ORDER, HELPER SCRIPTS AND HELPER BLOCKERS
1. Add note "testing/testfile_1.sfile" (common action)
	__
	^test 14$
	__
	return "First test 14 successful: " + (typeof tstFnc1 === "function" ? "has tstFnc1" : "no tstFnc1");
	__

	__
	__
	function tstFnc1() {};
	__

	__
	^test 15$
	__
	return "Test 15 successful: " + (typeof tstFnc1 === "function" ? "has tstFnc1" : "no tstFnc1");
	__

3. Add note "testing/testfile_2.sfile" (common action)
	__
	^test 14$
	__
	return "Second test 14 successful: " + (typeof tstFnc1 === "function" ? "has tstFnc1" : "no tstFnc1");
	__

	__
	^test 16$
	__
	return "Test 16 successful: " + (typeof tstFnc1 === "function" ? "has tstFnc1" : "no tstFnc1");
	__

	__
	__
	function tstFnc2() {};
	__

	__
	^test 17$
	__
	return "Test 17 successful: " + (typeof tstFnc2 === "function" ? "has tstFnc2" : "no tstFnc2");
	__

	__
	__
	__

	__
	^test 18$
	__
	return "Test 18 successful: " + (typeof tstFnc2 === "function" ? "has tstFnc2" : "no tstFnc2");
	__

6. Register shortcut-file "testing/testfile_1.sfile"
7. Register shortcut-file "testing/testfile_2.sfile"
9. Check shortcut "test 14" (common action)
10. Confirm that the expansion is "First test 14 successful: no tstFnc1"
11. Check shortcut "test 15" (common action)
12. Confirm that the expansion is "Test 15 successful: has tstFnc1"
13. Check shortcut "test 16" (common action)
14. Confirm that the expansion is "Test 16 successful: no tstFnc1"
15. Check shortcut "test 17" (common action)
16. Confirm that the expansion is "Test 17 successful: has tstFnc2"
17. Check shortcut "test 18" (common action)
18. Confirm that the expansion is "Test 18 successful: no tstFnc2"
19. Open plugin settings
20. In the shortcut-files setting, use the arrow keys to swap the two shortcut-file entries
21. Close plugin settings
22. Check shortcut "test 14" (common action)
23. Confirm that the expansion is "Second test 14 successful: no tstFnc1"
24. Reset settings

SHORTCUT-FILE - SETUP AND SHUTDOWN SCRIPTS
1. Add note "testing/testfile_1.sfile" (common action)
	__
	^sfile setup$
	__
	console.log("Setting up testfile_1");
	__

	__
	^sfile shutdown$
	__
	console.log("Shutting down testfile_1");
	__

2. Register shortcut-file entry "testing/testfile_1.sfile"
3. Confirm that a console entry is added: "Setting up testfile_1"
4. Go to the note "testing/testfile_1.sfile"
5. Add a newline to the end of the file
6. Go to the note "testResults"
7. Confirm that a console entry is added: "Setting up testfile_1"
8. Disable the plugin
9. Confirm that a console entry is added: "Shutting down testfile_1"
10. Enable the plugin
11. Confirm that a console entry is added: "Setting up testfile_1"
12. Open plugin settings
13. Disable the shortcut-file
14. Close plugin settings
15. Confirm that a console entry is added: "Shutting down testfile_1"
16. Open plugin settings
17. Enable the shortcut-file
18. Close plugin settings
19. Confirm that a console entry is added: "Setting up testfile_1"
20. Open plugin settings
21. Remove the shortcut-files entry "testing/testfile_1.sfile"
22. Close plugin settings
23. Confirm that a console entry is added: "Shutting down testfile_1"
24. Add note "testing/testfile_1.sfile"
	__
	^sfile setup$
	__
	console.log("Setting up testfile_1");
	return true;
	__

	__
	^test 19$
	__
	return "Test 19 successful";
	__

	__
	^sfile shutdown$
	__
	console.log("Shutting down testfile_1");
	__

17. Register shortcut-file "testing/testfile_1.sfile" (common action)
18. Confirm that a console entry is added "Setting up testfile_1"
19. Check invalid shortcut "test 19" (common action)
20. Open plugin settings
21. Remove the shortcut-files entry "testing/testfile_1.sfile"
22. Close plugin settings
23. Confirm that a console entry is NOT added "Shutting down testfile_1"

SHORTCUT-FILE - LIBRARY IMPORTING !! REQUIRES AN INTERNET CONNECTION !!
1. Open plugin settings
2. Unregister any registered shortcut-files
3. Click the "Import full library" button beside the "Shortcut-files" setting
4. Click the "Cancel" button in the popup
5. Confirm that there are no shortcut-file entries
6. Click the "Import full library" button beside the "Shortcut-files" setting
7. Click "Ok" button in popup
8. Confirm that a bunch of shortcut-file entries have been added
9. Count (and remember) the number of shortcut-file entries
10. Close plugin settings
11. Confirm that there is a new folder "support/inlineScripts" with files in it.
12. Confirm that the number of files matches the count from step 9
13. Reset settings
14. Delete the "support/inlineScripts" folder (and the files within)
15. Open plugin settings
16. Register shortcut-file "first" (common action)
17. Register shortcut-file "lib/lists.sfile" (common action)
18. Register shortcut-file "second" (common action)
19. Click the "Import full library" button
20. Confirm that the inputted path is "lib"
21. Click the "Ok" button
22. Confirm that a bunch of new entries have been added to Shortcut-files
23. Confirm that the first two entries are "first" and "second"
24. Confirm that "lib/lists.sfile" comes after the first 3 entries
25. Remove the first two entries: "first" and "second"
26. Confirm that the entry count matches the count from step 9
27. Confirm that all entries start with "lib/"
28. Close plugin settings
29. Confirm that there is a folder "lib"
30. Confirm that the "lib" folder contains files who's count matches that from step 9
31. Go to the note "lib/state.sfile"
32. Erase all contents of the note
33. Go to the note "testResults"
34. Open plugin settings
35. Click the "Import full library" button
36. Confirm that the inputted path is "lib"
37. Click the "Ok" button
38. Confirm that the entry count matches the count from step 9
39. Close plugin settings
40. Confirm that the "support" folder contains files who's count matches that from step 9
41. Go to the note "lib/state.sfile"
42. Confirm that it is not empty
43. Go to the note "testResults"
44. Open plugin settings
45. Click the "Import full library" button
46. Enter the path "testLib/depth2/depth3"
47. Click the "Ok" button
48. Confirm that there are twice as many shortcut-file entries as the count from step 9
49. Confirm that the first entries start with "lib/"
50. Confirm that the last entries start with "testLib/depth2/depth3/"
51. Close plugin settings
52. Confirm that the "lib" folder still exist, along with its files
53. Confirm that a new set of folders "testLib/depth2/depth3" exists with the same files
54. Reset settings
57. Delete the "lib" and "testLib" folders (and the folders and files within)
58. Disconnect internet
59. Open plugin settings
60. Click the "Import full library" button
61. Confirm that popup and console errors appear with "ERR_INTERNET-DISCONNECTED" type
62. Confirm that you can still use the Obsidian UI
63. Close plugin settings
64. Reconnect internet

SHORTCUT-FILE - LISTENER FOR EXPANSION EVENT
1. Add note "testing/testfile_1.sfile" (common action)
	__
	^sfile setup$
	__
	window._inlineScripts ||= {};
	window._inlineScripts.listeners ||= {};
	window._inlineScripts.listeners.inlineScripts ||= {};
	window._inlineScripts.listeners.inlineScripts.onExpansion ||= {};
	window._inlineScripts.listeners.inlineScripts.onExpansion.testCallback ||= (expansionInfo) =>
	{
		if (expansionInfo.shortcutText.contains("d"))
		{
			return "hi";
		}
		else
		{
			print("Shortcut input '" + expansionInfo.shortcutText + "' expanded to '" + expansionInfo.expansionText + "'.");
		}
	};
	__

	__
	^sfile shutdown$
	__
	delete window._inlineScripts.listeners?.inlineScripts?.onExpansion?.testCallback;
	__

2. Register shortcut-file "testing/testfile_1.sfile" (common action)
3. Check shortcut "hi" (common action)
4. Confirm that a popup and console log are added that show the input and expansion text.
5. Check shortcut "date" (common action)
6. Confirm that the expansion string is for the "hi" shortcut.
7. Check shortcut "d100" (common action)
8. Confirm that the expansion string is for the "hi" shortcut.
9. Check shortcut "time" (common action)
10. Confirm that the expansion string is for the "time shortcut.
11. Confirm that a popup and console message are added.
12. Open plugin settings
13. Remove the shortcut-file entry "testing/testfile_1.sfile"
14. Close plugin settings
15. Check shortcut "hi" (common action)
16. Confirm that no popup or expansion text shows up
17. Check shortcut "date" (common action)
18. Confirm that the expansion is the current date

SHORTCUT-FILE - ENABLE/DISABLE
1. Add note "testing/testfile_1.sfile"
	__
	test 20
	__
	return "First test 20 successful.";
	__

	__
	test 21
	__
	return "Test 21 successful.";
	__

2. Add note "testing/testfile_2.sfile"
	__
	test 20
	__
	return "Second test 20 successful.";
	__

	__
	test 22
	__
	return "Test 22 successful.";
	__


3. Register shortcut-file "testing/testfile_1.sfile"
4. Register shortcut-file "testing/testfile_2.sfile"
5. Check shortcut "test 20" (common action)
6. Confirm that the expansion is "First test 20 successful."
7. Check shortcut "test 21" (common action)
8. Check shortcut "test 22" (common action)
9. Open plugin settings
10. Turn off the toggle to the left of the entry "testing/testfile_1.sfile"
11. Close plugin settings
12. Check shortcut "test 20" (common action)
13. Confirm that the expansion is "Second test 20 successful."
14. Check invalid shortcut "test 21" (common action)
15. Check invalid help "testfile_1" (common action)
16. Check help "testfile_2" (common action)
17. Reset settings

SHORTCUT-FILE - FAIL SILENTLY
1. Add note "testing/testfile_1.sfile" (common action)
	__
	test 23
	__
	return ]"Test 23 successful";
	__

	__
	test 24
	__
	return "Test 24: " + (expand("test 23") ?? "test 23 failed");
	__

2. Register shortcut-file "testing/testfile_1.sfile" (common action)
3. Check shortcut "test 24" (common action)
4. Confirm that popup and console error "SHORTCUT-EXPANSION-ERROR" is added
5. Modify test 24 in "testing/testfile_1.sfile"
	- Expansion:
		return "Test 24: " + (expand("test 23", true) ?? "test 23 failed");

6. Go to the note "testResults"
7. Check shortcut "test 24" (common action)
8. Confirm that expansion is "Test 24: test 23 failed"
9. Go to the note "testing/testfile_1.sfile"
10. Modify the test 23 in "testing/testfile_1.sfile"
	- Expansion:
		<blank>

11. Go to the note "testResults"
12. Check shortcut "test 24" (common action)
13. Confirm that expansion is "Test 24: "
14. Open plugin settings
15. Remove the shortcut-files entry "testing/testfile_1.sfile"
16. Close plugin settings
17. Confirm that a console entry is NOT added

AUTOCOMPLETE
	NON-SYNTAXED
	BASIC SYNTAX
	PARAMETERS
	OPTIONAL PARAMETERS
	ALTERNATIVES
INSERT CHECK FOR DROPDOWN FILE LISTS
INSERT CHECK FOR DROPDOWN FOLDER LIST IN IMPORTING
POPUPS
	__
	^test alert$
	__
	console.log(popups.alert("hello"));
	console.log(popups.alert(2);
	console.log(popups.alert());
	console.log(popups.alert(null));
	__
	test alert - ...

	__
	^test confirm$
	__
	console.log(popups.confirm("hello"));
	console.log(popups.confirm(2));
	console.log(popups.confirm());
	console.log(popups.confirm(null));
	__
	test confirm - ...

	__
	^test input$
	__
	console.log(popups.input("hello", "good day") ?? "Canceled");
	console.log(popups.input("hello") ?? "Canceled");
	console.log(popups.input(2, 3) ?? "Canceled");
	console.log(popups.input(2) ?? "Canceled");
	console.log(popups.input() ?? "Canceled");
	console.log(popups.input(null) ?? "Canceled");
	console.log(popups.input(null, null) ?? "Canceled");
	__
	test input - ...

	__
	^test pick$
	__
	console.log(popups.pick("hello", ["first", "second", "third", "fourth"], 2) ?? "Canceled");
	console.log(popups.pick("hello", ["first", "second", "third", "fourth"], -2) ?? "Canceled");
	console.log(popups.pick("hello", ["first", "second", "third", "fourth"], 20) ?? "Canceled");
	console.log(popups.pick("hello", ["first", "second", "third", "fourth"], "second") ?? "Canceled");
	console.log(popups.pick("hello", ["first", "second", "third", "fourth"], null) ?? "Canceled");
	console.log(popups.pick("hello", ["first", "second", "third", "fourth"]) ?? "Canceled");
	console.log(popups.pick(1, ["first", "second", "third", "fourth"], 2) ?? "Canceled");
	console.log(popups.pick(null, ["first", "second", "third", "fourth"], 2) ?? "Canceled");
	console.log(popups.pick("hello", "first", 5) ?? "Canceled");
	console.log(popups.pick("hello", 5, 0) ?? "Canceled");
	console.log(popups.pick("hello", null, 2) ?? "Canceled");
	console.log(popups.pick("hello") ?? "Canceled");
	console.log(popups.pick() ?? "Canceled");
	__
	test pick - ...

	__
	^test custom$
	__
	```js
	const customization =
	{
		onOpen: (data, parent, firstButton, SettingType) =>
		{
			new SettingType(parent)
				.addText((text) =>
				{
					data.resultUi = text;
					text.setValue("John Smith");
					text.inputEl.select();
					text.inputEl.parentElement.previousSibling.remove();
					text.inputEl.classList.add("iscript_soloControl");
					text.inputEl.addEventListener("keypress", (e) =>
					{					if (e.key === "Enter")
						{
							firstButton.click();
						}
					});
				})
		},
		onClose: (data, resolveFnc, buttonText) =>
		{
			resolveFnc((buttonText == "Ok") ? data.resultUi.getValue() : null);
		}
	};
	return popups.custom("testing custom popup", customization) ?? "Canceled";
	```
	__
	test custom - ...


	__
	^test custom2$
	__
	```js
	const definition =
	{
		buttons: [ "Ok" ],
		onOpen: function(data, parent, firstButton, SettingType)
		{
			let s = document.createElement("select");
			s.appendChild(new Option("Fighter", "strong"));
			s.appendChild(new Option("Mage", "smart"));
			s.appendChild(new Option("Rogue", "nimble"));
			s.selectedIndex = data.defaultValue || 0;
			s.classList.add("dropdown");
			s.style["margin-bottom"] = "1.5em";
			s.addEventListener("keypress", (e) =>
			{
				if (e.key === "Enter")
				{
					firstButton.click();
				}
			});
			data.resultUi = s;
			parent.appendChild(s);
	window.a = s;
		},
		onClose: function(data, resolveFnc, buttonText)
		{
			resolveFnc(data.resultUi.value);
		}
	};
	result =
		popups.custom("Pick a character", definition, { defaultValue: 1 });
	return result;
	```
	__

